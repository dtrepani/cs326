TDSmalltalkLeafNode {	#name : 'copyToStHub',	#contents : '| pushRepoUrl sourceVersionStringList configurationClass attributeList stHubRepo pushRepo constructor packageNames repositories methodSections gofer methodSectionMap |pushRepoUrl := \'http://smalltalkhub.com/mc/dkh/metacello/main\'.sourceVersionStringList := #(\'1.0-beta.32.1\' \'1.0-beta.32.1-baseline\' \'1.0-beta.32\' \'1.0-beta.32-baseline\' \'1.0-beta.31.1.6\' \'1.0-beta.31.1.5-baseline\').configurationClass := ConfigurationOfMetacello.attributeList := #(#\'common\' #\'squeakCommon\' #\'pharo\' #\'squeak\' #\'gemstone\' #\'pharo1.x\' #\'pharo1.0.x\' #\'pharo1.1.x\' #\'pharo1.2.x\' #\'pharo1.3.x\' #\'pharo2.x\').stHubRepo := MCHttpRepository location: pushRepoUrl user: \'\' password: \'\'.MCRepositoryGroup default addRepository: stHubRepo.pushRepo := MCRepositoryGroup default repositories  detect: [ :repo | repo description = stHubRepo description ].packageNames := Set new.repositories := Set new.methodSections := #().sourceVersionStringList  do: [ :sourceVersionString |     constructor := MetacelloToolBoxConstructor new.    constructor configuration: configurationClass new.    constructor extractMethodSectionsFor: sourceVersionString.    methodSections := methodSections , constructor methodSections ].methodSectionMap := Dictionary new.methodSections  do: [ :methodSection |     | coll |    coll := methodSectionMap      at: methodSection attributePath      ifAbsent: [ methodSectionMap at: methodSection attributePath put: OrderedCollection new ].    coll add: methodSection ].attributeList  do: [ :attribute |     | sections |    sections := methodSectionMap      at: attribute asMetacelloAttributePath      ifAbsent: [ #() ].    sections      do: [ :methodSection |         | versionSpec repos |        versionSpec := methodSection versionSpec.        repos := versionSpec repositorySpecs          collect: [ :repoSpec | repoSpec createRepository ].        repositories addAll: repos.        versionSpec packages          specListDo: [ :packageSpec |             | file |            \"use respondsTo: because #getFile should be implemented in MetacelloAbstractPackageSpec\"            ((packageSpec respondsTo: #\'getFile\')              and: [ (file := packageSpec getFile) notNil ])              ifTrue: [ packageNames add: file ].            repos := [ packageSpec repositorySpecs collect: [ :repoSpec | repoSpec createRepository ] ]              on: Error              do: [ :ex |                 \"removed packages show up in this package list, but they don\'t have a projectReference (DUH), so handle the error here\"                ex return: #() ].            repositories addAll: repos ] ] ].Transcript  cr;  show: \'Start fetch\'.gofer := Gofer new.repositories do: [ :repo | gofer repository: repo ].packageNames do: [ :packageName | gofer version: packageName ].gofer fetch.Transcript  cr;  show: \'Start push\'.gofer := Gofer new.packageNames do: [ :packageName | gofer version: packageName ].gofer repository: pushRepo.gofer push'}